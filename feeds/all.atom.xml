<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Pono's World: Pono's World</title>
 <link rel="self" href="https://dspt.github.io/feeds/all.atom.xml" />
 <link href="https://dspt.github.io/index.html" />
 <id>urn:https-dspt-github-io:-index-html</id>
 <updated>2016-01-16T08:00:00Z</updated>
 <entry>
  <title type="text">Chicago: A Trip Report</title>
  <link rel="alternate" href="https://dspt.github.io/blog/2016/01/16/chicago-a-trip-report/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:https-dspt-github-io:-blog-2016-01-16-chicago-a-trip-report</id>
  <published>2016-01-16T08:00:00Z</published>
  <updated>2016-01-16T08:00:00Z</updated>
  <author>
   <name>Daniel Takamori</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;I recently came to Chicago for &lt;a href="http://tnkfest.com/"&gt;Tomorrow Never Knows&lt;/a&gt;. The acts I came to see where Lady Lamb, Tobacco, The Go Team!, and Julien Baker, in descending order of psychedness. While I came for the music  (and secretly to eat huitlacoche), there was a lot more going on that what I&amp;rsquo;d anticipated so here&amp;rsquo;s my trip report!&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Musically:&lt;/p&gt;

&lt;p&gt;Food:&lt;/p&gt;

&lt;p&gt;People:&lt;/p&gt;

&lt;p&gt;Transit:&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s some &lt;a href="http://bullshitipsum.com/?paragraphs=2"&gt;Bullshit Ipsum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Addelivery integrate ecologies e-markets standards-compliant utilize technologies aggregate addelivery viral&amp;mdash;communities dynamic functionalities. Mindshare engineer viral A-list: cross-platform remix engage social cross-media social innovate distributed matrix experiences monetize utilize innovative. Action-items transition recontextualize sexy Cluetrain envisioneer, &amp;ldquo;vortals communities evolve technologies sexy methodologies.&amp;rdquo; Enhance grow compelling iterate architect matrix plug-and-play reinvent scale, distributed incentivize, extend.&lt;/p&gt;

&lt;p&gt;Revolutionary proactive. Target; envisioneer e-services sticky robust morph users methodologies, markets content supply-chains, granular monetize reinvent harness initiatives. Plug-and-play productize vortals integrate compelling aggregate, user-contributed, integrate web-enabled grow extend mindshare, repurpose world-class harness next-generation eyeballs solutions blogospheres extend. Rss-capable methodologies, &amp;ldquo;vortals vertical,&amp;rdquo; synthesize real-time user-contributed impactful utilize architect deploy ROI redefine design proactive strategic user-centric.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a footnote&lt;sup&gt;&lt;a href="#2016-01-16-chicago-a-trip-report-footnote-1-definition" name="2016-01-16-chicago-a-trip-report-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id="code-blocks"&gt;Code blocks&lt;/h2&gt;

&lt;p&gt;Frog optionally uses &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; if it&amp;rsquo;s installed to do syntax highlighting. In your markdown using backtick code blocks you can specify a language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```language
some racket code
```&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That name is given to Pygments as the lexer to use.&lt;/p&gt;

&lt;p&gt;For example this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```js
/**
 * Some JavaScript
 */
function foo()
{
    if (counter &amp;lt;= 10)
        return;
    // it works!
```&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yields this:&lt;/p&gt;

&lt;div class="brush: js"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Some JavaScript&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// it works!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```racket
#lang racket
;; Finds Racket sources in all subdirs
(for ([path (in-directory)])
  (when (regexp-match? #rx"[.]rkt$" path)
    (printf "source file: ~a\n" path)))
(symbol-&amp;gt;string 'foo)
```&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yields this:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang &lt;/span&gt;&lt;span class="nn"&gt;racket&lt;/span&gt;
&lt;span class="c1"&gt;;; Finds Racket sources in all subdirs&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;in-directory&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;regexp-match?&lt;/span&gt; &lt;span class="sr"&gt;#rx"[.]rkt$"&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"source file: ~a&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;symbol-&amp;gt;string&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="ss"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Notice that, for Racket, symbols with unambiguous documentation (provided by one library, or provided by several where one is &lt;code&gt;racket&lt;/code&gt; or &lt;code&gt;racket/base&lt;/code&gt;) are links to that documentation.&lt;/p&gt;

&lt;p&gt;This also works outside fenced code blocks, for symbols in backticks immediately followed by &lt;code&gt;[racket]&lt;/code&gt;. Example: &lt;code&gt;printf&lt;/code&gt;. This isn&amp;rsquo;t official Markdown; it&amp;rsquo;s simply a pun on link syntax and fenced code block languages. This is similar to using &lt;code&gt;@racket[printf]&lt;/code&gt; in Scribble.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;symbol-&amp;gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a lambda: λ.&lt;/p&gt;

&lt;p&gt;Here is a lambda in code backticks: &lt;code&gt;λ&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And here in indented code block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here in fenced code block, no lang specified:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here in fenced code block, lang = &lt;code&gt;racket&lt;/code&gt;:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;λ&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="no"&gt;#t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And here in fenced code block, lang = &lt;code&gt;scheme&lt;/code&gt;:&lt;/p&gt;

&lt;div class="brush: scheme"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="no"&gt;#t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s a simple &lt;code&gt;for&lt;/code&gt; macro, written in &lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html"&gt;Racket&lt;/a&gt;:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define-syntax-rule&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;for-each&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;λ&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The end.&lt;/p&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2016-01-16-chicago-a-trip-report-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;Footnote definition.&amp;nbsp;&lt;a href="#2016-01-16-chicago-a-trip-report-footnote-1-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">new git page</title>
  <link rel="alternate" href="https://dspt.github.io/blog/2014/08/01/new-git-page/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:https-dspt-github-io:-blog-2014-08-01-new-git-page</id>
  <published>2014-08-01T20:27:56Z</published>
  <updated>2014-08-01T20:27:56Z</updated>
  <author>
   <name>Daniel Takamori</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;Hello world this is a demo.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Even more text.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">git4lit</title>
  <link rel="alternate" href="https://dspt.github.io/blog/2014/08/01/git4lit/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:https-dspt-github-io:-blog-2014-08-01-git4lit</id>
  <published>2014-08-01T16:56:08Z</published>
  <updated>2014-08-01T16:56:08Z</updated>
  <author>
   <name>Daniel Takamori</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;Today we&amp;rsquo;ll be looking at the version control system (VCS) known as &lt;a href="http://www.git-scm.com/"&gt;git&lt;/a&gt;. git is the industry (at least in Open Source) standard for version control. It happens to be a distributed version control system (DVCS) which differs from the historical style of having a canonical copy of the source tree. Written by Linus Torvalds of Linux fame, git is a tool that all people working in prose or code should be familiar with.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;1). Why we need VC.&lt;/p&gt;

&lt;p&gt;2). What you can use git for&lt;/p&gt;

&lt;p&gt;3). Let&amp;rsquo;s make some webpages!&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Bash Love</title>
  <link rel="alternate" href="https://dspt.github.io/blog/2014/08/01/bash-love/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:https-dspt-github-io:-blog-2014-08-01-bash-love</id>
  <published>2014-08-01T16:32:04Z</published>
  <updated>2014-08-01T16:32:04Z</updated>
  <author>
   <name>Daniel Takamori</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;At the OSL our workstations are shared and named after colors. emerald.workstation.osuosl.bak is where I usually sit in the NOC (Figure 1). I use tmux (Figure *) to multiplex so I can connect to my session from anywhere, but when splitting the terminal to get a side by side, very often the prompt can get obscenely long (Figure 2). This calls for shortening the bash prompt in order to maximize utility of $COLUMNS.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Behold! (Figure 3, 4)&lt;/p&gt;

&lt;p&gt;Using a case statement and filtering out the color from the hostname, I color code my prompt based on hostname. This very easily lets me know $HOSTNAME, and indirectly /usr/bin/whoami since almost every other user will preface their prompt with a $USER.&lt;/p&gt;

&lt;p&gt;This was a 10 minute exercise in learning how to write case statements in bash and provide some cute utility to an otherwise stale prompt. The other thing you might notice is that I directly add the unicode heart into the prompt. This causes difficulty on TTYs and some terminal emulators, so there should be a check to make sure it can be loaded and replacing with something else if it fails. A quick hack to make life prettier!&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="https://staff.osuosl.org/~pono/bashblog3.png" alt="picture" /&gt;
 &lt;p class="caption"&gt;picture&lt;/p&gt;&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">PGD Cookbook</title>
  <link rel="alternate" href="https://dspt.github.io/blog/2014/08/01/pgd-cookbook/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:https-dspt-github-io:-blog-2014-08-01-pgd-cookbook</id>
  <published>2014-08-01T16:28:13Z</published>
  <updated>2014-08-01T16:28:13Z</updated>
  <author>
   <name>Daniel Takamori</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;When I mention, yum cookbook, recipes, and how to use knife, what comes to mind? When first using &lt;a href="http://getchef.com"&gt;Chef&lt;/a&gt; you begin to wonder what they were thinking naming their product such a common thing. Chef is a &lt;a href="https://en.wikipedia.org/wiki/Software_configuration_management"&gt;configuration management&lt;/a&gt;(CI) tool. CI is a methodology for programmatically managing software and hardware. There are many popular open source options including &lt;a href="https://puppetlabs.com/"&gt;Puppet&lt;/a&gt;, &lt;a href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt;, &lt;a href="http://www.saltstack.com/"&gt;SaltStack&lt;/a&gt;,  and &lt;a href="http://nixos.org/"&gt;NixOS&lt;/a&gt; to name a few. They differ in their language of implementation, design goals, and range of popularity.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;As an overview lets say you have a database server and web app. You are looking to deploy a development instance of your web app but create it in such a way that anyone can spin up a new instance and test against your various git branches of the code base. One way to do this is with &lt;a href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt;. You could then write a bash script to provision the machine and just run the  commands verbatim from the script. This is nice if you know exactly what you want to do and an expert in bash.&lt;/p&gt;&lt;/html&gt;</content></entry></feed>